/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider */

#ifndef _Included_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
#define _Included_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
 * Method:    generateCSR
 * Signature: (ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider_generateCSR
  (JNIEnv *, jobject, jint, jstring, jstring, jstring, jstring);

/*
 * Class:     br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
 * Method:    readCert
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/Object;
 */
JNIEXPORT jobjectArray JNICALL Java_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider_readCert
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
 * Method:    keyGen
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider_keyGen
  (JNIEnv *, jclass, jint);

/*
 * Class:     br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
 * Method:    sign
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider_sign
  (JNIEnv *, jclass, jint);

/*
 * Class:     br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider
 * Method:    verify
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_br_usp_larc_sembei_capacitysharing_crypto_MSSCryptoProvider_verify
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
